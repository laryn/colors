<?php

/**
 * @file
 * Install, update and uninstall functions for the colors module.
 */

/**
 * Implements hook_install().
 */
function colors_install() {
  $color_options = array(
    'background' => '#3366cc',
    'border' => '#3366cc',
    'text' => '#ffffff',
  );
  colors_set_colors('colors_default', $color_options);
  // Dynamically generated variable data was detected on the following lines.
  // /colors/includes/colors.admin.inc line 50
  // /colors/includes/colors.admin.inc line 53
  // /colors/includes/taxonomy.colors.inc line 62
}

/**
 * Implements hook_uninstall().
 */
function colors_uninstall() {
  db_delete('variable')
    ->condition('name', db_like('colors_') . '%', 'LIKE')
    ->execute();
  cache_clear_all('variables', 'cache_bootstrap');
}

/**
 * Implements hook_schema().
 */
function colors_schema() {
  $schema['colors'] = array(
    'description' => 'Stores selectors and their matching colors.',
    'fields' => array(
      'selector' => array(
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => '',
        'description' => 'Unique selector name.',
        'translatable' => TRUE,
      ),
      'color' => array(
        'type' => 'blob',
        'not null' => TRUE,
        'description' => 'Color configuration array.',
        'size' => 'big',
        'serialize' => TRUE,
      ),
      'module' => array(
        'type' => 'varchar',
        'length' => 128,
        'not null' => TRUE,
        'default' => 'colors',
        'description' => 'Module that created the color configuration.',
        'translatable' => TRUE,
      ),
    ),
    'primary key' => array('selector'),
  );
  return $schema;
}

/**
 * Implements hook_update_last_removed().
 */
function colors_update_last_removed() {
  return;
}

/**
 * Implements hook_update_N().
 */
function colors_update_1000() {
  $config = config('colors.settings');
  $config->set('colors_module_enabled', update_variable_get('colors_module_enabled', 'dynamic variable in file /colors/includes/colors.admin.inc line 50'));
  $config->set('colors_weight_module', update_variable_get('colors_weight_module', 'dynamic variable in file /colors/includes/colors.admin.inc line 53'));
  $config->set('colors_process_order_enabled', update_variable_get('colors_process_order_enabled', 'FALSE'));
  $config->set('colors_node_type_enabled', update_variable_get('colors_node_type_enabled', 'FALSE'));
  $config->set('colors_og_enabled', update_variable_get('colors_og_enabled', 'FALSE'));
  $config->set('colors_taxonomy_term_enabled', update_variable_get('colors_taxonomy_term_enabled', 'FALSE'));
  $config->set('colors_taxonomy_term_vid_enabled', update_variable_get('colors_taxonomy_term_vid_enabled', 'dynamic variable in file /colors/includes/taxonomy.colors.inc line 62'));
  $config->set('colors_user_role_enabled', update_variable_get('colors_user_role_enabled', 'FALSE'));
  $config->set('colors_user_current_enabled', update_variable_get('colors_user_current_enabled', 'FALSE'));
  $config->set('colors_users_enabled', update_variable_get('colors_users_enabled', 'FALSE'));
  update_variable_del('colors_module_enabled');
  update_variable_del('colors_weight_module');
  update_variable_del('colors_process_order_enabled');
  update_variable_del('colors_node_type_enabled');
  update_variable_del('colors_og_enabled');
  update_variable_del('colors_taxonomy_term_enabled');
  update_variable_del('colors_taxonomy_term_vid_enabled');
  update_variable_del('colors_user_role_enabled');
  update_variable_del('colors_user_current_enabled');
  update_variable_del('colors_users_enabled');
}
